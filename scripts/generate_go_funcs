#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_get_funcs() {
    local func
    local type="$1"

    for func in "Get" "GetDiff"; do
        case "$type" in
            "")
        cat <<EOF
func (c *JSONCfg) $func(key string) interface{} {
    return c.config[key]
}

func (c *JSONCfg) ${func}Array(key string) []interface{} {
    return c.config[key].([]interface{})
}

func (c *JSONCfg) ${func}Map(key string) map[string]interface{} {
    return c.config[key].(map[string]interface{})
}

EOF
                ;;
            "bool"|"string")
        cat <<EOF
func (c *JSONCfg) $func${type^}(key string) $type {
    return c.config[key].($type)
}

func (c *JSONCfg) $func${type^}Array(key string) []$type {
    return c.config[key].([]$type)
}

func (c *JSONCfg) $func${type^}Map(key string) map[string]$type {
    return c.config[key].(map[string]$type)
}

EOF
                ;;
            "float"*|"int"*|"uint"*)
        cat <<EOF
func (c *JSONCfg) $func${type^}(key string) $type {
    return $type(c.config[key].(float64))
}

func (c *JSONCfg) $func${type^}Array(key string) []$type {
    var ok bool
    var val = []$type{}

    if val, ok = c.config[key].([]$type); ok {
        return val
    }

    for _, v := range c.config[key].([]interface{}) {
        val = append(val, $type(v.(float64)))
    }

    return val
}

func (c *JSONCfg) $func${type^}Map(key string) map[string]$type {
    var ok bool
    var val = map[string]$type{}

    if val, ok = c.config[key].(map[string]$type); ok {
        return val
    }

    for k, v := range c.config[key].(map[string]interface{}) {
        val[k] = $type(v.(float64))
    }

    return val
}

EOF
                ;;
        esac
    done; unset func
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jsoncfg

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        generate_get_funcs $thetype
    done; unset thetype
)
EOF

go fmt "$file"
