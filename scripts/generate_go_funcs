#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_funcs() {
    local t="${1^}"
    local rt="${1:-interface{\}}"

    for i in "" "diff"; do
        cat <<EOF
// Get${i^}$t will return the value for the specified key(s) as a
// $rt.
func (c *JSONCfg) Get${i^}$t(key ...interface{}) $rt {
    return c.${i:-config}.Get$t(key...)
}

// Get${i^}${t}Array will return an array for the specified key(s) as
// a []$rt.
func (c *JSONCfg) Get${i^}${t}Array(key ...interface{}) []$rt {
    return c.${i:-config}.Get${t}Array(key...)
}

// Get${i^}${t}Map will return a map for the specified key(s) as a
// map[string]$rt.
func (c *JSONCfg) Get${i^}${t}Map(key ...interface{}) map[string]$rt {
    return c.${i:-config}.Get${t}Map(key...)
}

// MustGet${i^}$t will return the value for the specified key(s) as a
// $rt.
func (c *JSONCfg) MustGet${i^}$t(key ...interface{}) ($rt, error) {
    return c.${i:-config}.MustGet$t(key...)
}

// MustGet${i^}${t}Array will return an array for the specified key(s)
// as a []$rt.
func (c *JSONCfg) MustGet${i^}${t}Array(
    key ...interface{},
) ([]$rt, error) {
    return c.${i:-config}.MustGet${t}Array(key...)
}

// MustGet${i^}${t}Map will return a map for the specified key(s) as a
// map[string]$rt.
func (c *JSONCfg) MustGet${i^}${t}Map(
    key ...interface{},
) (map[string]$rt, error) {
    return c.${i:-config}.MustGet${t}Map(key...)
}

EOF
    done; unset i
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Create generated.go.

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset help
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("go")
check_deps

# Check for valid params
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jsoncfg

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        generate_funcs $thetype
    done; unset thetype
)
EOF

go fmt "$file" >/dev/null
