// Code generated by genfuncs; DO NOT EDIT.
package jsoncfg

// Get will return the value for the specified key(s) as a any.
func (c *JSONCfg) Get(key ...any) any {
	return c.config.Get(key...)
}

// GetArray will return an array for the specified key(s) as a
// []any.
func (c *JSONCfg) GetArray(key ...any) []any {
	return c.config.GetArray(key...)
}

// GetMap will return a map for the specified key(s) as a
// map[string]any.
func (c *JSONCfg) GetMap(key ...any) map[string]any {
	return c.config.GetMap(key...)
}

// MustGet will return the value for the specified key(s) as a
// any.
func (c *JSONCfg) MustGet(key ...any) (any, error) {
	return c.config.MustGet(key...)
}

// MustGetArray will return an array for the specified key(s) as
// a []any.
func (c *JSONCfg) MustGetArray(key ...any) ([]any, error) {
	return c.config.MustGetArray(key...)
}

// MustGetMap will return a map for the specified key(s) as a
// map[string]any.
func (c *JSONCfg) MustGetMap(key ...any) (map[string]any, error) {
	return c.config.MustGetMap(key...)
}

// GetDiff will return the value for the specified key(s) as a any.
func (c *JSONCfg) GetDiff(key ...any) any {
	return c.diff.Get(key...)
}

// GetDiffArray will return an array for the specified key(s) as a
// []any.
func (c *JSONCfg) GetDiffArray(key ...any) []any {
	return c.diff.GetArray(key...)
}

// GetDiffMap will return a map for the specified key(s) as a
// map[string]any.
func (c *JSONCfg) GetDiffMap(key ...any) map[string]any {
	return c.diff.GetMap(key...)
}

// MustGetDiff will return the value for the specified key(s) as a
// any.
func (c *JSONCfg) MustGetDiff(key ...any) (any, error) {
	return c.diff.MustGet(key...)
}

// MustGetDiffArray will return an array for the specified key(s) as
// a []any.
func (c *JSONCfg) MustGetDiffArray(key ...any) ([]any, error) {
	return c.diff.MustGetArray(key...)
}

// MustGetDiffMap will return a map for the specified key(s) as a
// map[string]any.
func (c *JSONCfg) MustGetDiffMap(key ...any) (map[string]any, error) {
	return c.diff.MustGetMap(key...)
}

// GetBool will return the value for the specified key(s) as a bool.
func (c *JSONCfg) GetBool(key ...any) bool {
	return c.config.GetBool(key...)
}

// GetBoolArray will return an array for the specified key(s) as a
// []bool.
func (c *JSONCfg) GetBoolArray(key ...any) []bool {
	return c.config.GetBoolArray(key...)
}

// GetBoolMap will return a map for the specified key(s) as a
// map[string]bool.
func (c *JSONCfg) GetBoolMap(key ...any) map[string]bool {
	return c.config.GetBoolMap(key...)
}

// MustGetBool will return the value for the specified key(s) as a
// bool.
func (c *JSONCfg) MustGetBool(key ...any) (bool, error) {
	return c.config.MustGetBool(key...)
}

// MustGetBoolArray will return an array for the specified key(s) as
// a []bool.
func (c *JSONCfg) MustGetBoolArray(key ...any) ([]bool, error) {
	return c.config.MustGetBoolArray(key...)
}

// MustGetBoolMap will return a map for the specified key(s) as a
// map[string]bool.
func (c *JSONCfg) MustGetBoolMap(key ...any) (map[string]bool, error) {
	return c.config.MustGetBoolMap(key...)
}

// GetDiffBool will return the value for the specified key(s) as a bool.
func (c *JSONCfg) GetDiffBool(key ...any) bool {
	return c.diff.GetBool(key...)
}

// GetDiffBoolArray will return an array for the specified key(s) as a
// []bool.
func (c *JSONCfg) GetDiffBoolArray(key ...any) []bool {
	return c.diff.GetBoolArray(key...)
}

// GetDiffBoolMap will return a map for the specified key(s) as a
// map[string]bool.
func (c *JSONCfg) GetDiffBoolMap(key ...any) map[string]bool {
	return c.diff.GetBoolMap(key...)
}

// MustGetDiffBool will return the value for the specified key(s) as a
// bool.
func (c *JSONCfg) MustGetDiffBool(key ...any) (bool, error) {
	return c.diff.MustGetBool(key...)
}

// MustGetDiffBoolArray will return an array for the specified key(s) as
// a []bool.
func (c *JSONCfg) MustGetDiffBoolArray(key ...any) ([]bool, error) {
	return c.diff.MustGetBoolArray(key...)
}

// MustGetDiffBoolMap will return a map for the specified key(s) as a
// map[string]bool.
func (c *JSONCfg) MustGetDiffBoolMap(key ...any) (map[string]bool, error) {
	return c.diff.MustGetBoolMap(key...)
}

// GetFloat32 will return the value for the specified key(s) as a float32.
func (c *JSONCfg) GetFloat32(key ...any) float32 {
	return c.config.GetFloat32(key...)
}

// GetFloat32Array will return an array for the specified key(s) as a
// []float32.
func (c *JSONCfg) GetFloat32Array(key ...any) []float32 {
	return c.config.GetFloat32Array(key...)
}

// GetFloat32Map will return a map for the specified key(s) as a
// map[string]float32.
func (c *JSONCfg) GetFloat32Map(key ...any) map[string]float32 {
	return c.config.GetFloat32Map(key...)
}

// MustGetFloat32 will return the value for the specified key(s) as a
// float32.
func (c *JSONCfg) MustGetFloat32(key ...any) (float32, error) {
	return c.config.MustGetFloat32(key...)
}

// MustGetFloat32Array will return an array for the specified key(s) as
// a []float32.
func (c *JSONCfg) MustGetFloat32Array(key ...any) ([]float32, error) {
	return c.config.MustGetFloat32Array(key...)
}

// MustGetFloat32Map will return a map for the specified key(s) as a
// map[string]float32.
func (c *JSONCfg) MustGetFloat32Map(key ...any) (map[string]float32, error) {
	return c.config.MustGetFloat32Map(key...)
}

// GetDiffFloat32 will return the value for the specified key(s) as a float32.
func (c *JSONCfg) GetDiffFloat32(key ...any) float32 {
	return c.diff.GetFloat32(key...)
}

// GetDiffFloat32Array will return an array for the specified key(s) as a
// []float32.
func (c *JSONCfg) GetDiffFloat32Array(key ...any) []float32 {
	return c.diff.GetFloat32Array(key...)
}

// GetDiffFloat32Map will return a map for the specified key(s) as a
// map[string]float32.
func (c *JSONCfg) GetDiffFloat32Map(key ...any) map[string]float32 {
	return c.diff.GetFloat32Map(key...)
}

// MustGetDiffFloat32 will return the value for the specified key(s) as a
// float32.
func (c *JSONCfg) MustGetDiffFloat32(key ...any) (float32, error) {
	return c.diff.MustGetFloat32(key...)
}

// MustGetDiffFloat32Array will return an array for the specified key(s) as
// a []float32.
func (c *JSONCfg) MustGetDiffFloat32Array(key ...any) ([]float32, error) {
	return c.diff.MustGetFloat32Array(key...)
}

// MustGetDiffFloat32Map will return a map for the specified key(s) as a
// map[string]float32.
func (c *JSONCfg) MustGetDiffFloat32Map(key ...any) (map[string]float32, error) {
	return c.diff.MustGetFloat32Map(key...)
}

// GetFloat64 will return the value for the specified key(s) as a float64.
func (c *JSONCfg) GetFloat64(key ...any) float64 {
	return c.config.GetFloat64(key...)
}

// GetFloat64Array will return an array for the specified key(s) as a
// []float64.
func (c *JSONCfg) GetFloat64Array(key ...any) []float64 {
	return c.config.GetFloat64Array(key...)
}

// GetFloat64Map will return a map for the specified key(s) as a
// map[string]float64.
func (c *JSONCfg) GetFloat64Map(key ...any) map[string]float64 {
	return c.config.GetFloat64Map(key...)
}

// MustGetFloat64 will return the value for the specified key(s) as a
// float64.
func (c *JSONCfg) MustGetFloat64(key ...any) (float64, error) {
	return c.config.MustGetFloat64(key...)
}

// MustGetFloat64Array will return an array for the specified key(s) as
// a []float64.
func (c *JSONCfg) MustGetFloat64Array(key ...any) ([]float64, error) {
	return c.config.MustGetFloat64Array(key...)
}

// MustGetFloat64Map will return a map for the specified key(s) as a
// map[string]float64.
func (c *JSONCfg) MustGetFloat64Map(key ...any) (map[string]float64, error) {
	return c.config.MustGetFloat64Map(key...)
}

// GetDiffFloat64 will return the value for the specified key(s) as a float64.
func (c *JSONCfg) GetDiffFloat64(key ...any) float64 {
	return c.diff.GetFloat64(key...)
}

// GetDiffFloat64Array will return an array for the specified key(s) as a
// []float64.
func (c *JSONCfg) GetDiffFloat64Array(key ...any) []float64 {
	return c.diff.GetFloat64Array(key...)
}

// GetDiffFloat64Map will return a map for the specified key(s) as a
// map[string]float64.
func (c *JSONCfg) GetDiffFloat64Map(key ...any) map[string]float64 {
	return c.diff.GetFloat64Map(key...)
}

// MustGetDiffFloat64 will return the value for the specified key(s) as a
// float64.
func (c *JSONCfg) MustGetDiffFloat64(key ...any) (float64, error) {
	return c.diff.MustGetFloat64(key...)
}

// MustGetDiffFloat64Array will return an array for the specified key(s) as
// a []float64.
func (c *JSONCfg) MustGetDiffFloat64Array(key ...any) ([]float64, error) {
	return c.diff.MustGetFloat64Array(key...)
}

// MustGetDiffFloat64Map will return a map for the specified key(s) as a
// map[string]float64.
func (c *JSONCfg) MustGetDiffFloat64Map(key ...any) (map[string]float64, error) {
	return c.diff.MustGetFloat64Map(key...)
}

// GetInt will return the value for the specified key(s) as a int.
func (c *JSONCfg) GetInt(key ...any) int {
	return c.config.GetInt(key...)
}

// GetIntArray will return an array for the specified key(s) as a
// []int.
func (c *JSONCfg) GetIntArray(key ...any) []int {
	return c.config.GetIntArray(key...)
}

// GetIntMap will return a map for the specified key(s) as a
// map[string]int.
func (c *JSONCfg) GetIntMap(key ...any) map[string]int {
	return c.config.GetIntMap(key...)
}

// MustGetInt will return the value for the specified key(s) as a
// int.
func (c *JSONCfg) MustGetInt(key ...any) (int, error) {
	return c.config.MustGetInt(key...)
}

// MustGetIntArray will return an array for the specified key(s) as
// a []int.
func (c *JSONCfg) MustGetIntArray(key ...any) ([]int, error) {
	return c.config.MustGetIntArray(key...)
}

// MustGetIntMap will return a map for the specified key(s) as a
// map[string]int.
func (c *JSONCfg) MustGetIntMap(key ...any) (map[string]int, error) {
	return c.config.MustGetIntMap(key...)
}

// GetDiffInt will return the value for the specified key(s) as a int.
func (c *JSONCfg) GetDiffInt(key ...any) int {
	return c.diff.GetInt(key...)
}

// GetDiffIntArray will return an array for the specified key(s) as a
// []int.
func (c *JSONCfg) GetDiffIntArray(key ...any) []int {
	return c.diff.GetIntArray(key...)
}

// GetDiffIntMap will return a map for the specified key(s) as a
// map[string]int.
func (c *JSONCfg) GetDiffIntMap(key ...any) map[string]int {
	return c.diff.GetIntMap(key...)
}

// MustGetDiffInt will return the value for the specified key(s) as a
// int.
func (c *JSONCfg) MustGetDiffInt(key ...any) (int, error) {
	return c.diff.MustGetInt(key...)
}

// MustGetDiffIntArray will return an array for the specified key(s) as
// a []int.
func (c *JSONCfg) MustGetDiffIntArray(key ...any) ([]int, error) {
	return c.diff.MustGetIntArray(key...)
}

// MustGetDiffIntMap will return a map for the specified key(s) as a
// map[string]int.
func (c *JSONCfg) MustGetDiffIntMap(key ...any) (map[string]int, error) {
	return c.diff.MustGetIntMap(key...)
}

// GetInt16 will return the value for the specified key(s) as a int16.
func (c *JSONCfg) GetInt16(key ...any) int16 {
	return c.config.GetInt16(key...)
}

// GetInt16Array will return an array for the specified key(s) as a
// []int16.
func (c *JSONCfg) GetInt16Array(key ...any) []int16 {
	return c.config.GetInt16Array(key...)
}

// GetInt16Map will return a map for the specified key(s) as a
// map[string]int16.
func (c *JSONCfg) GetInt16Map(key ...any) map[string]int16 {
	return c.config.GetInt16Map(key...)
}

// MustGetInt16 will return the value for the specified key(s) as a
// int16.
func (c *JSONCfg) MustGetInt16(key ...any) (int16, error) {
	return c.config.MustGetInt16(key...)
}

// MustGetInt16Array will return an array for the specified key(s) as
// a []int16.
func (c *JSONCfg) MustGetInt16Array(key ...any) ([]int16, error) {
	return c.config.MustGetInt16Array(key...)
}

// MustGetInt16Map will return a map for the specified key(s) as a
// map[string]int16.
func (c *JSONCfg) MustGetInt16Map(key ...any) (map[string]int16, error) {
	return c.config.MustGetInt16Map(key...)
}

// GetDiffInt16 will return the value for the specified key(s) as a int16.
func (c *JSONCfg) GetDiffInt16(key ...any) int16 {
	return c.diff.GetInt16(key...)
}

// GetDiffInt16Array will return an array for the specified key(s) as a
// []int16.
func (c *JSONCfg) GetDiffInt16Array(key ...any) []int16 {
	return c.diff.GetInt16Array(key...)
}

// GetDiffInt16Map will return a map for the specified key(s) as a
// map[string]int16.
func (c *JSONCfg) GetDiffInt16Map(key ...any) map[string]int16 {
	return c.diff.GetInt16Map(key...)
}

// MustGetDiffInt16 will return the value for the specified key(s) as a
// int16.
func (c *JSONCfg) MustGetDiffInt16(key ...any) (int16, error) {
	return c.diff.MustGetInt16(key...)
}

// MustGetDiffInt16Array will return an array for the specified key(s) as
// a []int16.
func (c *JSONCfg) MustGetDiffInt16Array(key ...any) ([]int16, error) {
	return c.diff.MustGetInt16Array(key...)
}

// MustGetDiffInt16Map will return a map for the specified key(s) as a
// map[string]int16.
func (c *JSONCfg) MustGetDiffInt16Map(key ...any) (map[string]int16, error) {
	return c.diff.MustGetInt16Map(key...)
}

// GetInt32 will return the value for the specified key(s) as a int32.
func (c *JSONCfg) GetInt32(key ...any) int32 {
	return c.config.GetInt32(key...)
}

// GetInt32Array will return an array for the specified key(s) as a
// []int32.
func (c *JSONCfg) GetInt32Array(key ...any) []int32 {
	return c.config.GetInt32Array(key...)
}

// GetInt32Map will return a map for the specified key(s) as a
// map[string]int32.
func (c *JSONCfg) GetInt32Map(key ...any) map[string]int32 {
	return c.config.GetInt32Map(key...)
}

// MustGetInt32 will return the value for the specified key(s) as a
// int32.
func (c *JSONCfg) MustGetInt32(key ...any) (int32, error) {
	return c.config.MustGetInt32(key...)
}

// MustGetInt32Array will return an array for the specified key(s) as
// a []int32.
func (c *JSONCfg) MustGetInt32Array(key ...any) ([]int32, error) {
	return c.config.MustGetInt32Array(key...)
}

// MustGetInt32Map will return a map for the specified key(s) as a
// map[string]int32.
func (c *JSONCfg) MustGetInt32Map(key ...any) (map[string]int32, error) {
	return c.config.MustGetInt32Map(key...)
}

// GetDiffInt32 will return the value for the specified key(s) as a int32.
func (c *JSONCfg) GetDiffInt32(key ...any) int32 {
	return c.diff.GetInt32(key...)
}

// GetDiffInt32Array will return an array for the specified key(s) as a
// []int32.
func (c *JSONCfg) GetDiffInt32Array(key ...any) []int32 {
	return c.diff.GetInt32Array(key...)
}

// GetDiffInt32Map will return a map for the specified key(s) as a
// map[string]int32.
func (c *JSONCfg) GetDiffInt32Map(key ...any) map[string]int32 {
	return c.diff.GetInt32Map(key...)
}

// MustGetDiffInt32 will return the value for the specified key(s) as a
// int32.
func (c *JSONCfg) MustGetDiffInt32(key ...any) (int32, error) {
	return c.diff.MustGetInt32(key...)
}

// MustGetDiffInt32Array will return an array for the specified key(s) as
// a []int32.
func (c *JSONCfg) MustGetDiffInt32Array(key ...any) ([]int32, error) {
	return c.diff.MustGetInt32Array(key...)
}

// MustGetDiffInt32Map will return a map for the specified key(s) as a
// map[string]int32.
func (c *JSONCfg) MustGetDiffInt32Map(key ...any) (map[string]int32, error) {
	return c.diff.MustGetInt32Map(key...)
}

// GetInt64 will return the value for the specified key(s) as a int64.
func (c *JSONCfg) GetInt64(key ...any) int64 {
	return c.config.GetInt64(key...)
}

// GetInt64Array will return an array for the specified key(s) as a
// []int64.
func (c *JSONCfg) GetInt64Array(key ...any) []int64 {
	return c.config.GetInt64Array(key...)
}

// GetInt64Map will return a map for the specified key(s) as a
// map[string]int64.
func (c *JSONCfg) GetInt64Map(key ...any) map[string]int64 {
	return c.config.GetInt64Map(key...)
}

// MustGetInt64 will return the value for the specified key(s) as a
// int64.
func (c *JSONCfg) MustGetInt64(key ...any) (int64, error) {
	return c.config.MustGetInt64(key...)
}

// MustGetInt64Array will return an array for the specified key(s) as
// a []int64.
func (c *JSONCfg) MustGetInt64Array(key ...any) ([]int64, error) {
	return c.config.MustGetInt64Array(key...)
}

// MustGetInt64Map will return a map for the specified key(s) as a
// map[string]int64.
func (c *JSONCfg) MustGetInt64Map(key ...any) (map[string]int64, error) {
	return c.config.MustGetInt64Map(key...)
}

// GetDiffInt64 will return the value for the specified key(s) as a int64.
func (c *JSONCfg) GetDiffInt64(key ...any) int64 {
	return c.diff.GetInt64(key...)
}

// GetDiffInt64Array will return an array for the specified key(s) as a
// []int64.
func (c *JSONCfg) GetDiffInt64Array(key ...any) []int64 {
	return c.diff.GetInt64Array(key...)
}

// GetDiffInt64Map will return a map for the specified key(s) as a
// map[string]int64.
func (c *JSONCfg) GetDiffInt64Map(key ...any) map[string]int64 {
	return c.diff.GetInt64Map(key...)
}

// MustGetDiffInt64 will return the value for the specified key(s) as a
// int64.
func (c *JSONCfg) MustGetDiffInt64(key ...any) (int64, error) {
	return c.diff.MustGetInt64(key...)
}

// MustGetDiffInt64Array will return an array for the specified key(s) as
// a []int64.
func (c *JSONCfg) MustGetDiffInt64Array(key ...any) ([]int64, error) {
	return c.diff.MustGetInt64Array(key...)
}

// MustGetDiffInt64Map will return a map for the specified key(s) as a
// map[string]int64.
func (c *JSONCfg) MustGetDiffInt64Map(key ...any) (map[string]int64, error) {
	return c.diff.MustGetInt64Map(key...)
}

// GetString will return the value for the specified key(s) as a string.
func (c *JSONCfg) GetString(key ...any) string {
	return c.config.GetString(key...)
}

// GetStringArray will return an array for the specified key(s) as a
// []string.
func (c *JSONCfg) GetStringArray(key ...any) []string {
	return c.config.GetStringArray(key...)
}

// GetStringMap will return a map for the specified key(s) as a
// map[string]string.
func (c *JSONCfg) GetStringMap(key ...any) map[string]string {
	return c.config.GetStringMap(key...)
}

// MustGetString will return the value for the specified key(s) as a
// string.
func (c *JSONCfg) MustGetString(key ...any) (string, error) {
	return c.config.MustGetString(key...)
}

// MustGetStringArray will return an array for the specified key(s) as
// a []string.
func (c *JSONCfg) MustGetStringArray(key ...any) ([]string, error) {
	return c.config.MustGetStringArray(key...)
}

// MustGetStringMap will return a map for the specified key(s) as a
// map[string]string.
func (c *JSONCfg) MustGetStringMap(key ...any) (map[string]string, error) {
	return c.config.MustGetStringMap(key...)
}

// GetDiffString will return the value for the specified key(s) as a string.
func (c *JSONCfg) GetDiffString(key ...any) string {
	return c.diff.GetString(key...)
}

// GetDiffStringArray will return an array for the specified key(s) as a
// []string.
func (c *JSONCfg) GetDiffStringArray(key ...any) []string {
	return c.diff.GetStringArray(key...)
}

// GetDiffStringMap will return a map for the specified key(s) as a
// map[string]string.
func (c *JSONCfg) GetDiffStringMap(key ...any) map[string]string {
	return c.diff.GetStringMap(key...)
}

// MustGetDiffString will return the value for the specified key(s) as a
// string.
func (c *JSONCfg) MustGetDiffString(key ...any) (string, error) {
	return c.diff.MustGetString(key...)
}

// MustGetDiffStringArray will return an array for the specified key(s) as
// a []string.
func (c *JSONCfg) MustGetDiffStringArray(key ...any) ([]string, error) {
	return c.diff.MustGetStringArray(key...)
}

// MustGetDiffStringMap will return a map for the specified key(s) as a
// map[string]string.
func (c *JSONCfg) MustGetDiffStringMap(key ...any) (map[string]string, error) {
	return c.diff.MustGetStringMap(key...)
}

// GetUint will return the value for the specified key(s) as a uint.
func (c *JSONCfg) GetUint(key ...any) uint {
	return c.config.GetUint(key...)
}

// GetUintArray will return an array for the specified key(s) as a
// []uint.
func (c *JSONCfg) GetUintArray(key ...any) []uint {
	return c.config.GetUintArray(key...)
}

// GetUintMap will return a map for the specified key(s) as a
// map[string]uint.
func (c *JSONCfg) GetUintMap(key ...any) map[string]uint {
	return c.config.GetUintMap(key...)
}

// MustGetUint will return the value for the specified key(s) as a
// uint.
func (c *JSONCfg) MustGetUint(key ...any) (uint, error) {
	return c.config.MustGetUint(key...)
}

// MustGetUintArray will return an array for the specified key(s) as
// a []uint.
func (c *JSONCfg) MustGetUintArray(key ...any) ([]uint, error) {
	return c.config.MustGetUintArray(key...)
}

// MustGetUintMap will return a map for the specified key(s) as a
// map[string]uint.
func (c *JSONCfg) MustGetUintMap(key ...any) (map[string]uint, error) {
	return c.config.MustGetUintMap(key...)
}

// GetDiffUint will return the value for the specified key(s) as a uint.
func (c *JSONCfg) GetDiffUint(key ...any) uint {
	return c.diff.GetUint(key...)
}

// GetDiffUintArray will return an array for the specified key(s) as a
// []uint.
func (c *JSONCfg) GetDiffUintArray(key ...any) []uint {
	return c.diff.GetUintArray(key...)
}

// GetDiffUintMap will return a map for the specified key(s) as a
// map[string]uint.
func (c *JSONCfg) GetDiffUintMap(key ...any) map[string]uint {
	return c.diff.GetUintMap(key...)
}

// MustGetDiffUint will return the value for the specified key(s) as a
// uint.
func (c *JSONCfg) MustGetDiffUint(key ...any) (uint, error) {
	return c.diff.MustGetUint(key...)
}

// MustGetDiffUintArray will return an array for the specified key(s) as
// a []uint.
func (c *JSONCfg) MustGetDiffUintArray(key ...any) ([]uint, error) {
	return c.diff.MustGetUintArray(key...)
}

// MustGetDiffUintMap will return a map for the specified key(s) as a
// map[string]uint.
func (c *JSONCfg) MustGetDiffUintMap(key ...any) (map[string]uint, error) {
	return c.diff.MustGetUintMap(key...)
}

// GetUint16 will return the value for the specified key(s) as a uint16.
func (c *JSONCfg) GetUint16(key ...any) uint16 {
	return c.config.GetUint16(key...)
}

// GetUint16Array will return an array for the specified key(s) as a
// []uint16.
func (c *JSONCfg) GetUint16Array(key ...any) []uint16 {
	return c.config.GetUint16Array(key...)
}

// GetUint16Map will return a map for the specified key(s) as a
// map[string]uint16.
func (c *JSONCfg) GetUint16Map(key ...any) map[string]uint16 {
	return c.config.GetUint16Map(key...)
}

// MustGetUint16 will return the value for the specified key(s) as a
// uint16.
func (c *JSONCfg) MustGetUint16(key ...any) (uint16, error) {
	return c.config.MustGetUint16(key...)
}

// MustGetUint16Array will return an array for the specified key(s) as
// a []uint16.
func (c *JSONCfg) MustGetUint16Array(key ...any) ([]uint16, error) {
	return c.config.MustGetUint16Array(key...)
}

// MustGetUint16Map will return a map for the specified key(s) as a
// map[string]uint16.
func (c *JSONCfg) MustGetUint16Map(key ...any) (map[string]uint16, error) {
	return c.config.MustGetUint16Map(key...)
}

// GetDiffUint16 will return the value for the specified key(s) as a uint16.
func (c *JSONCfg) GetDiffUint16(key ...any) uint16 {
	return c.diff.GetUint16(key...)
}

// GetDiffUint16Array will return an array for the specified key(s) as a
// []uint16.
func (c *JSONCfg) GetDiffUint16Array(key ...any) []uint16 {
	return c.diff.GetUint16Array(key...)
}

// GetDiffUint16Map will return a map for the specified key(s) as a
// map[string]uint16.
func (c *JSONCfg) GetDiffUint16Map(key ...any) map[string]uint16 {
	return c.diff.GetUint16Map(key...)
}

// MustGetDiffUint16 will return the value for the specified key(s) as a
// uint16.
func (c *JSONCfg) MustGetDiffUint16(key ...any) (uint16, error) {
	return c.diff.MustGetUint16(key...)
}

// MustGetDiffUint16Array will return an array for the specified key(s) as
// a []uint16.
func (c *JSONCfg) MustGetDiffUint16Array(key ...any) ([]uint16, error) {
	return c.diff.MustGetUint16Array(key...)
}

// MustGetDiffUint16Map will return a map for the specified key(s) as a
// map[string]uint16.
func (c *JSONCfg) MustGetDiffUint16Map(key ...any) (map[string]uint16, error) {
	return c.diff.MustGetUint16Map(key...)
}

// GetUint32 will return the value for the specified key(s) as a uint32.
func (c *JSONCfg) GetUint32(key ...any) uint32 {
	return c.config.GetUint32(key...)
}

// GetUint32Array will return an array for the specified key(s) as a
// []uint32.
func (c *JSONCfg) GetUint32Array(key ...any) []uint32 {
	return c.config.GetUint32Array(key...)
}

// GetUint32Map will return a map for the specified key(s) as a
// map[string]uint32.
func (c *JSONCfg) GetUint32Map(key ...any) map[string]uint32 {
	return c.config.GetUint32Map(key...)
}

// MustGetUint32 will return the value for the specified key(s) as a
// uint32.
func (c *JSONCfg) MustGetUint32(key ...any) (uint32, error) {
	return c.config.MustGetUint32(key...)
}

// MustGetUint32Array will return an array for the specified key(s) as
// a []uint32.
func (c *JSONCfg) MustGetUint32Array(key ...any) ([]uint32, error) {
	return c.config.MustGetUint32Array(key...)
}

// MustGetUint32Map will return a map for the specified key(s) as a
// map[string]uint32.
func (c *JSONCfg) MustGetUint32Map(key ...any) (map[string]uint32, error) {
	return c.config.MustGetUint32Map(key...)
}

// GetDiffUint32 will return the value for the specified key(s) as a uint32.
func (c *JSONCfg) GetDiffUint32(key ...any) uint32 {
	return c.diff.GetUint32(key...)
}

// GetDiffUint32Array will return an array for the specified key(s) as a
// []uint32.
func (c *JSONCfg) GetDiffUint32Array(key ...any) []uint32 {
	return c.diff.GetUint32Array(key...)
}

// GetDiffUint32Map will return a map for the specified key(s) as a
// map[string]uint32.
func (c *JSONCfg) GetDiffUint32Map(key ...any) map[string]uint32 {
	return c.diff.GetUint32Map(key...)
}

// MustGetDiffUint32 will return the value for the specified key(s) as a
// uint32.
func (c *JSONCfg) MustGetDiffUint32(key ...any) (uint32, error) {
	return c.diff.MustGetUint32(key...)
}

// MustGetDiffUint32Array will return an array for the specified key(s) as
// a []uint32.
func (c *JSONCfg) MustGetDiffUint32Array(key ...any) ([]uint32, error) {
	return c.diff.MustGetUint32Array(key...)
}

// MustGetDiffUint32Map will return a map for the specified key(s) as a
// map[string]uint32.
func (c *JSONCfg) MustGetDiffUint32Map(key ...any) (map[string]uint32, error) {
	return c.diff.MustGetUint32Map(key...)
}

// GetUint64 will return the value for the specified key(s) as a uint64.
func (c *JSONCfg) GetUint64(key ...any) uint64 {
	return c.config.GetUint64(key...)
}

// GetUint64Array will return an array for the specified key(s) as a
// []uint64.
func (c *JSONCfg) GetUint64Array(key ...any) []uint64 {
	return c.config.GetUint64Array(key...)
}

// GetUint64Map will return a map for the specified key(s) as a
// map[string]uint64.
func (c *JSONCfg) GetUint64Map(key ...any) map[string]uint64 {
	return c.config.GetUint64Map(key...)
}

// MustGetUint64 will return the value for the specified key(s) as a
// uint64.
func (c *JSONCfg) MustGetUint64(key ...any) (uint64, error) {
	return c.config.MustGetUint64(key...)
}

// MustGetUint64Array will return an array for the specified key(s) as
// a []uint64.
func (c *JSONCfg) MustGetUint64Array(key ...any) ([]uint64, error) {
	return c.config.MustGetUint64Array(key...)
}

// MustGetUint64Map will return a map for the specified key(s) as a
// map[string]uint64.
func (c *JSONCfg) MustGetUint64Map(key ...any) (map[string]uint64, error) {
	return c.config.MustGetUint64Map(key...)
}

// GetDiffUint64 will return the value for the specified key(s) as a uint64.
func (c *JSONCfg) GetDiffUint64(key ...any) uint64 {
	return c.diff.GetUint64(key...)
}

// GetDiffUint64Array will return an array for the specified key(s) as a
// []uint64.
func (c *JSONCfg) GetDiffUint64Array(key ...any) []uint64 {
	return c.diff.GetUint64Array(key...)
}

// GetDiffUint64Map will return a map for the specified key(s) as a
// map[string]uint64.
func (c *JSONCfg) GetDiffUint64Map(key ...any) map[string]uint64 {
	return c.diff.GetUint64Map(key...)
}

// MustGetDiffUint64 will return the value for the specified key(s) as a
// uint64.
func (c *JSONCfg) MustGetDiffUint64(key ...any) (uint64, error) {
	return c.diff.MustGetUint64(key...)
}

// MustGetDiffUint64Array will return an array for the specified key(s) as
// a []uint64.
func (c *JSONCfg) MustGetDiffUint64Array(key ...any) ([]uint64, error) {
	return c.diff.MustGetUint64Array(key...)
}

// MustGetDiffUint64Map will return a map for the specified key(s) as a
// map[string]uint64.
func (c *JSONCfg) MustGetDiffUint64Map(key ...any) (map[string]uint64, error) {
	return c.diff.MustGetUint64Map(key...)
}
